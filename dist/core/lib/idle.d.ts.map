{"version":3,"file":"idle.d.ts","sources":["idle.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, NgZone, OnDestroy } from '@angular/core';\r\nimport { IdleExpiry } from './idleexpiry';\r\nimport { Interrupt } from './interrupt';\r\nimport { InterruptSource } from './interruptsource';\r\nimport { KeepaliveSvc } from './keepalivesvc';\r\nexport declare enum AutoResume {\r\n    disabled = 0,\r\n    idle = 1,\r\n    notIdle = 2\r\n}\r\n/**\r\n * A service for detecting and responding to user idleness.\r\n */\r\nexport declare class Idle implements OnDestroy {\r\n    private expiry;\r\n    private zone;\r\n    private idle;\r\n    private timeoutVal;\r\n    private autoResume;\r\n    private interrupts;\r\n    private running;\r\n    private idling;\r\n    private idleHandle;\r\n    private timeoutHandle;\r\n    private countdown;\r\n    private keepaliveEnabled;\r\n    private keepaliveSvc;\r\n    onIdleStart: EventEmitter<any>;\r\n    onIdleEnd: EventEmitter<any>;\r\n    onTimeoutWarning: EventEmitter<number>;\r\n    onTimeout: EventEmitter<number>;\r\n    onInterrupt: EventEmitter<any>;\r\n    [key: string]: any;\r\n    constructor(expiry: IdleExpiry, zone: NgZone, keepaliveSvc?: KeepaliveSvc);\r\n    setIdleName(key: string): void;\r\n    getKeepaliveEnabled(): boolean;\r\n    setKeepaliveEnabled(value: boolean): boolean;\r\n    getTimeout(): number;\r\n    setTimeout(seconds: number | boolean): number;\r\n    getIdle(): number;\r\n    setIdle(seconds: number): number;\r\n    getAutoResume(): AutoResume;\r\n    setAutoResume(value: AutoResume): AutoResume;\r\n    setInterrupts(sources: Array<InterruptSource>): Array<Interrupt>;\r\n    getInterrupts(): Array<Interrupt>;\r\n    clearInterrupts(): void;\r\n    isRunning(): boolean;\r\n    isIdling(): boolean;\r\n    watch(skipExpiry?: boolean): void;\r\n    setIdleIntervalOutsideOfZone(watchFn: () => void, frequency: number): void;\r\n    stop(): void;\r\n    timeout(): void;\r\n    interrupt(force?: boolean, eventArgs?: any): void;\r\n    private setIdling;\r\n    private toggleState;\r\n    private setTimoutIntervalOutsideZone;\r\n    private toggleInterrupts;\r\n    private getExpiryDiff;\r\n    private doCountdownInZone;\r\n    private doCountdown;\r\n    private safeClearInterval;\r\n    private startKeepalive;\r\n    private stopKeepalive;\r\n    ngOnDestroy(): void;\r\n}\r\n"]}
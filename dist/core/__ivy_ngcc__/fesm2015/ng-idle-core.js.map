{"version":3,"file":"ng-idle-core.js","sources":["../../../projects/core/src/lib/idleexpiry.ts","../../../projects/core/src/lib/interrupt.ts","../../../projects/core/src/lib/keepalivesvc.ts","../../../projects/core/src/lib/alternativestorage.ts","../../../projects/core/src/lib/localstorage.ts","../../../projects/core/src/lib/localstorageexpiry.ts","../../../projects/core/src/lib/idle.ts","../../../projects/core/src/lib/interruptargs.ts","../../../projects/core/src/lib/interruptsource.ts","../../../projects/core/src/lib/eventtargetinterruptsource.ts","../../../projects/core/src/lib/documentinterruptsource.ts","../../../projects/core/src/lib/windowinterruptsource.ts","../../../projects/core/src/lib/storageinterruptsource.ts","../../../projects/core/src/lib/simpleexpiry.ts","../../../projects/core/src/lib/module.ts","../../../projects/core/src/lib/defaultinterruptsources.ts","../../../projects/core/src/public-api.ts","../../../projects/core/src/ng-idle-core.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Represents a base class for types that provide expiry detection for the Idle service.\r\n */\r\nexport abstract class IdleExpiry {\r\n  protected idValue: any;\r\n  protected idlingValue: boolean;\r\n\r\n  constructor() {\r\n    this.idValue = new Date();\r\n    this.idlingValue = false;\r\n  }\r\n\r\n  /*\r\n   * Gets or sets a unique ID for the window\r\n   * @param id - The id.\r\n   * @return The current id.\r\n   */\r\n  id(value?: any): any {\r\n    if (value !== void 0) {\r\n      if (!value) {\r\n        throw new Error('A value must be specified for the ID.');\r\n      }\r\n\r\n      this.idValue = value;\r\n    }\r\n\r\n    return this.idValue;\r\n  }\r\n\r\n  /*\r\n   * Gets or sets the last expiry date.\r\n   * @param value - The value to set.\r\n   * @return The last expiry value.\r\n   */\r\n  abstract last(value?: Date): Date;\r\n\r\n  /*\r\n   * Gets or sets the idling value.\r\n   * @param value - The value to set.\r\n   * @return The idling value.\r\n   */\r\n  idling(value?: boolean): boolean {\r\n    if (value !== void 0) {\r\n      this.idlingValue = value;\r\n    }\r\n\r\n    return this.idlingValue;\r\n  }\r\n\r\n  /*\r\n   * Returns the current Date.\r\n   * @return The current Date.\r\n   */\r\n  now(): Date {\r\n    /* istanbul ignore next */\r\n    return new Date();\r\n  }\r\n\r\n  /*\r\n   * Returns whether or not it is expired.\r\n   * @return True if expired; otherwise, false.\r\n   */\r\n  isExpired(): boolean {\r\n    const expiry = this.last();\r\n    return expiry != null && expiry <= this.now();\r\n  }\r\n}\r\n","import { Subscription } from 'rxjs';\r\n\r\nimport { InterruptArgs } from './interruptargs';\r\nimport { InterruptSource } from './interruptsource';\r\n\r\n/*\r\n * A class for managing an interrupt from an interrupt source.\r\n */\r\nexport class Interrupt {\r\n  private sub: Subscription;\r\n\r\n  constructor(public source: InterruptSource) {}\r\n\r\n  /*\r\n   * Subscribes to the interrupt using the specified function.\r\n   * @param fn - The subscription function.\r\n   */\r\n  subscribe(fn: (args: InterruptArgs) => void): void {\r\n    this.sub = this.source.onInterrupt.subscribe(fn);\r\n  }\r\n\r\n  /*\r\n   * Unsubscribes the interrupt.\r\n   */\r\n  unsubscribe(): void {\r\n    this.sub.unsubscribe();\r\n    this.sub = null;\r\n  }\r\n\r\n  /*\r\n   * Keeps the subscription but resumes interrupt events.\r\n   */\r\n  resume(): void {\r\n    this.source.attach();\r\n  }\r\n\r\n  /*\r\n   * Keeps the subscription but pauses interrupt events.\r\n   */\r\n  pause(): void {\r\n    this.source.detach();\r\n  }\r\n}\r\n","export abstract class KeepaliveSvc {\r\n  abstract start(): void;\r\n  abstract stop(): void;\r\n  abstract ping(): void;\r\n}\r\n","/*\r\n * Represents an alternative storage for browser that doesn't support localstorage. (i.e. Safari in\r\n * private mode)\r\n * @implements Storage\r\n */\r\nexport class AlternativeStorage implements Storage {\r\n  private storageMap: any = {};\r\n\r\n  /*\r\n   * Returns an integer representing the number of data items stored in the storageMap object.\r\n   */\r\n  get length() {\r\n    return Object.keys(this.storageMap).length;\r\n  }\r\n\r\n  /*\r\n   * Remove all keys out of the storage.\r\n   */\r\n  clear(): void {\r\n    this.storageMap = {};\r\n  }\r\n\r\n  /*\r\n   * Return the key's value\r\n   *\r\n   * @param key - name of the key to retrieve the value of.\r\n   * @return The key's value\r\n   */\r\n  getItem(key: string): string | null {\r\n    if (typeof this.storageMap[key] !== 'undefined') {\r\n      return this.storageMap[key];\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /*\r\n   * Return the nth key in the storage\r\n   *\r\n   * @param index - the number of the key you want to get the name of.\r\n   * @return The name of the key.\r\n   */\r\n  key(index: number): string | null {\r\n    return Object.keys(this.storageMap)[index] || null;\r\n  }\r\n\r\n  /*\r\n   * Remove a key from the storage.\r\n   *\r\n   * @param key - the name of the key you want to remove.\r\n   */\r\n  removeItem(key: string): void {\r\n    this.storageMap[key] = undefined;\r\n  }\r\n\r\n  /*\r\n   * Add a key to the storage, or update a key's value if it already exists.\r\n   *\r\n   * @param key - the name of the key.\r\n   * @param value - the value you want to give to the key.\r\n   */\r\n  setItem(key: string, value: string): void {\r\n    this.storageMap[key] = value;\r\n  }\r\n\r\n  [key: string]: any;\r\n  [index: number]: string;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AlternativeStorage } from './alternativestorage';\r\n\r\n/*\r\n * Represents a localStorage store.\r\n */\r\n@Injectable()\r\nexport class LocalStorage {\r\n  private storage: Storage;\r\n\r\n  constructor() {\r\n    this.storage = this.getStorage();\r\n  }\r\n\r\n  /*\r\n   * Safari, in Private Browsing Mode, looks like it supports localStorage but all calls to setItem\r\n   * throw QuotaExceededError. We're going to detect this and just silently drop any calls to\r\n   * setItem\r\n   * to avoid the entire page breaking, without having to do a check at each usage of Storage.\r\n   */\r\n  private getStorage(): Storage {\r\n    try {\r\n      const storage = localStorage;\r\n      storage.setItem('ng2IdleStorage', '');\r\n      storage.removeItem('ng2IdleStorage');\r\n      return storage;\r\n    } catch (err) {\r\n      return new AlternativeStorage();\r\n    }\r\n  }\r\n\r\n  /*\r\n   * Gets an item in the storage.\r\n   *\r\n   * @param value - The value to get.\r\n   * @return The current value.\r\n   */\r\n  getItem(key: string): string | null {\r\n    return this.storage.getItem('ng2Idle.' + key);\r\n  }\r\n\r\n  /*\r\n   * Removes an item in the storage.\r\n   *\r\n   * @param value - The value to remove.\r\n   */\r\n  removeItem(key: string): void {\r\n    this.storage.removeItem('ng2Idle.' + key);\r\n  }\r\n\r\n  /*\r\n   * Sets an item in the storage.\r\n   *\r\n   * @param key - The key to set the value.\r\n   * @param value - The value to set to the key.\r\n   */\r\n  setItem(key: string, data: string): void {\r\n    this.storage.setItem('ng2Idle.' + key, data);\r\n  }\r\n\r\n  /*\r\n   * Represents the storage, commonly use for testing purposes.\r\n   *\r\n   * @param key - The key to set the value.\r\n   * @param value - The value to set to the key.\r\n   */\r\n  _wrapped(): Storage {\r\n    return this.storage;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { IdleExpiry } from './idleexpiry';\r\nimport { LocalStorage } from './localstorage';\r\n\r\n/*\r\n * Represents a localStorage store of expiry values.\r\n * @extends IdleExpiry\r\n */\r\n@Injectable()\r\nexport class LocalStorageExpiry extends IdleExpiry {\r\n  private idleName = 'main';\r\n\r\n  constructor(private localStorage: LocalStorage) {\r\n    super();\r\n  }\r\n\r\n  /*\r\n   * Gets or sets the last expiry date in localStorage.\r\n   * If localStorage doesn't work correctly (i.e. Safari in private mode), we store the expiry value in memory.\r\n   * @param value - The expiry value to set; omit to only return the value.\r\n   * @return The current expiry value.\r\n   */\r\n  last(value?: Date): Date {\r\n    if (value !== void 0) {\r\n      this.setExpiry(value);\r\n    }\r\n    return this.getExpiry();\r\n  }\r\n\r\n  idling(value?: boolean): boolean {\r\n    if (value !== void 0) {\r\n      this.setIdling(value);\r\n    }\r\n    return this.getIdling();\r\n  }\r\n\r\n  /*\r\n   * Gets the idle name.\r\n   * @return The name of the idle.\r\n   */\r\n  getIdleName(): string {\r\n    return this.idleName;\r\n  }\r\n\r\n  /*\r\n   * Sets the idle name.\r\n   * @param The name of the idle.\r\n   */\r\n  setIdleName(key: string): void {\r\n    if (key) {\r\n      this.idleName = key;\r\n    }\r\n  }\r\n\r\n  private getExpiry(): Date {\r\n    const expiry: string = this.localStorage.getItem(this.idleName + '.expiry');\r\n    if (expiry) {\r\n      return new Date(parseInt(expiry, 10));\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private setExpiry(value: Date) {\r\n    if (value) {\r\n      this.localStorage.setItem(\r\n        this.idleName + '.expiry',\r\n        value.getTime().toString()\r\n      );\r\n    } else {\r\n      this.localStorage.removeItem(this.idleName + '.expiry');\r\n    }\r\n  }\r\n\r\n  private getIdling(): boolean {\r\n    const idling: string = this.localStorage.getItem(this.idleName + '.idling');\r\n    if (idling) {\r\n      return idling === 'true';\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private setIdling(value: boolean) {\r\n    if (value) {\r\n      this.localStorage.setItem(this.idleName + '.idling', value.toString());\r\n    } else {\r\n      this.localStorage.setItem(this.idleName + '.idling', 'false');\r\n    }\r\n  }\r\n}\r\n","import {\r\n  EventEmitter,\r\n  Injectable,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional\r\n} from '@angular/core';\r\n\r\nimport { IdleExpiry } from './idleexpiry';\r\nimport { Interrupt } from './interrupt';\r\nimport { InterruptArgs } from './interruptargs';\r\nimport { InterruptSource } from './interruptsource';\r\nimport { KeepaliveSvc } from './keepalivesvc';\r\nimport { LocalStorageExpiry } from './localstorageexpiry';\r\n\r\n/*\r\n * Indicates the desired auto resume behavior.\r\n */\r\nexport enum AutoResume {\r\n  /*\r\n   * Auto resume functionality will be disabled.\r\n   */\r\n  disabled,\r\n  /*\r\n   * Can resume automatically even if they are idle.\r\n   */\r\n  idle,\r\n  /*\r\n   * Can only resume automatically if they are not yet idle.\r\n   */\r\n  notIdle\r\n}\r\n\r\n/**\r\n * A service for detecting and responding to user idleness.\r\n */\r\n@Injectable()\r\nexport class Idle implements OnDestroy {\r\n  private idle: number = 20 * 60; // in seconds\r\n  private timeoutVal = 30; // in seconds\r\n  private autoResume: AutoResume = AutoResume.idle;\r\n  private interrupts: Array<Interrupt> = new Array();\r\n  private running = false;\r\n  private idling: boolean;\r\n  private idleHandle: any;\r\n  private timeoutHandle: any;\r\n  private countdown: number;\r\n  private keepaliveEnabled = false;\r\n  private keepaliveSvc: KeepaliveSvc;\r\n\r\n  public onIdleStart: EventEmitter<any> = new EventEmitter();\r\n  public onIdleEnd: EventEmitter<any> = new EventEmitter();\r\n  public onTimeoutWarning: EventEmitter<number> = new EventEmitter<number>();\r\n  public onTimeout: EventEmitter<number> = new EventEmitter<number>();\r\n  public onInterrupt: EventEmitter<any> = new EventEmitter();\r\n\r\n  [key: string]: any;\r\n\r\n  constructor(\r\n    private expiry: IdleExpiry,\r\n    private zone: NgZone,\r\n    @Optional() keepaliveSvc?: KeepaliveSvc\r\n  ) {\r\n    if (keepaliveSvc) {\r\n      this.keepaliveSvc = keepaliveSvc;\r\n      this.keepaliveEnabled = true;\r\n    }\r\n    this.setIdling(false);\r\n  }\r\n\r\n  /*\r\n   * Sets the idle name for localStorage.\r\n   * Important to set if multiple instances of Idle with LocalStorageExpiry\r\n   * @param The name of the idle.\r\n   */\r\n  setIdleName(key: string): void {\r\n    if (this.expiry instanceof LocalStorageExpiry) {\r\n      this.expiry.setIdleName(key);\r\n    } else {\r\n      throw new Error(\r\n        'Cannot set expiry key name because no LocalStorageExpiry has been provided.'\r\n      );\r\n    }\r\n  }\r\n\r\n  /*\r\n   * Returns whether or not keepalive integration is enabled.\r\n   * @return True if integration is enabled; otherwise, false.\r\n   */\r\n  getKeepaliveEnabled(): boolean {\r\n    return this.keepaliveEnabled;\r\n  }\r\n\r\n  /*\r\n   * Sets and returns whether or not keepalive integration is enabled.\r\n   * @param True if the integration is enabled; otherwise, false.\r\n   * @return The current value.\r\n   */\r\n  setKeepaliveEnabled(value: boolean): boolean {\r\n    if (!this.keepaliveSvc) {\r\n      throw new Error(\r\n        'Cannot enable keepalive integration because no KeepaliveSvc has been provided.'\r\n      );\r\n    }\r\n\r\n    return (this.keepaliveEnabled = value);\r\n  }\r\n\r\n  /*\r\n   * Returns the current timeout value.\r\n   * @return The timeout value in seconds.\r\n   */\r\n  getTimeout(): number {\r\n    return this.timeoutVal;\r\n  }\r\n\r\n  /*\r\n   * Sets the timeout value.\r\n   * @param seconds - The timeout value in seconds. 0 or false to disable timeout feature.\r\n   * @return The current value. If disabled, the value will be 0.\r\n   */\r\n  setTimeout(seconds: number | boolean): number {\r\n    if (seconds === false) {\r\n      this.timeoutVal = 0;\r\n    } else if (typeof seconds === 'number' && seconds >= 0) {\r\n      this.timeoutVal = seconds;\r\n    } else {\r\n      throw new Error(\"'seconds' can only be 'false' or a positive number.\");\r\n    }\r\n\r\n    return this.timeoutVal;\r\n  }\r\n\r\n  /*\r\n   * Returns the current idle value.\r\n   * @return The idle value in seconds.\r\n   */\r\n  getIdle(): number {\r\n    return this.idle;\r\n  }\r\n\r\n  /*\r\n   * Sets the idle value.\r\n   * @param seconds - The idle value in seconds.\r\n   * @return The idle value in seconds.\r\n   */\r\n  setIdle(seconds: number): number {\r\n    if (seconds <= 0) {\r\n      throw new Error(\"'seconds' must be greater zero\");\r\n    }\r\n\r\n    return (this.idle = seconds);\r\n  }\r\n\r\n  /*\r\n   * Returns the current autoresume value.\r\n   * @return The current value.\r\n   */\r\n  getAutoResume(): AutoResume {\r\n    return this.autoResume;\r\n  }\r\n\r\n  setAutoResume(value: AutoResume): AutoResume {\r\n    return (this.autoResume = value);\r\n  }\r\n\r\n  /*\r\n   * Sets interrupts from the specified sources.\r\n   * @param sources - Interrupt sources.\r\n   * @return The resulting interrupts.\r\n   */\r\n  setInterrupts(sources: Array<InterruptSource>): Array<Interrupt> {\r\n    this.clearInterrupts();\r\n\r\n    const self = this;\r\n\r\n    for (const source of sources) {\r\n      const sub = new Interrupt(source);\r\n      sub.subscribe((args: InterruptArgs) => {\r\n        self.interrupt(args.force, args.innerArgs);\r\n      });\r\n\r\n      this.interrupts.push(sub);\r\n    }\r\n\r\n    return this.interrupts;\r\n  }\r\n\r\n  /*\r\n   * Returns the current interrupts.\r\n   * @return The current interrupts.\r\n   */\r\n  getInterrupts(): Array<Interrupt> {\r\n    return this.interrupts;\r\n  }\r\n\r\n  /*\r\n   * Pauses, unsubscribes, and clears the current interrupt subscriptions.\r\n   */\r\n  clearInterrupts(): void {\r\n    for (const sub of this.interrupts) {\r\n      sub.pause();\r\n      sub.unsubscribe();\r\n    }\r\n\r\n    this.interrupts.length = 0;\r\n  }\r\n\r\n  /*\r\n   * Returns whether or not the service is running i.e. watching for idleness.\r\n   * @return True if service is watching; otherwise, false.\r\n   */\r\n  isRunning(): boolean {\r\n    return this.running;\r\n  }\r\n\r\n  /*\r\n   * Returns whether or not the user is considered idle.\r\n   * @return True if the user is in the idle state; otherwise, false.\r\n   */\r\n  isIdling(): boolean {\r\n    return this.idling;\r\n  }\r\n\r\n  /*\r\n   * Starts watching for inactivity.\r\n   */\r\n  watch(skipExpiry?: boolean): void {\r\n    this.safeClearInterval('idleHandle');\r\n    this.safeClearInterval('timeoutHandle');\r\n\r\n    const timeout = !this.timeoutVal ? 0 : this.timeoutVal;\r\n    if (!skipExpiry) {\r\n      const value = new Date(\r\n        this.expiry.now().getTime() + (this.idle + timeout) * 1000\r\n      );\r\n      this.expiry.last(value);\r\n    }\r\n\r\n    if (this.idling) {\r\n      this.toggleState();\r\n    }\r\n    if (!this.running) {\r\n      this.startKeepalive();\r\n      this.toggleInterrupts(true);\r\n    }\r\n\r\n    this.running = true;\r\n\r\n    const watchFn = () => {\r\n      this.zone.run(() => {\r\n        const diff = this.getExpiryDiff(timeout);\r\n        if (diff > 0) {\r\n          this.safeClearInterval('idleHandle');\r\n          this.setIdleIntervalOutsideOfZone(watchFn, 1000);\r\n        } else {\r\n          this.toggleState();\r\n        }\r\n      });\r\n    };\r\n\r\n    this.setIdleIntervalOutsideOfZone(watchFn, 1000);\r\n  }\r\n\r\n  /*\r\n   * Allows protractor tests to call waitForAngular without hanging\r\n   */\r\n  setIdleIntervalOutsideOfZone(watchFn: () => void, frequency: number): void {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.idleHandle = setInterval(watchFn, frequency);\r\n    });\r\n  }\r\n\r\n  /*\r\n   * Stops watching for inactivity.\r\n   */\r\n  stop(): void {\r\n    this.stopKeepalive();\r\n\r\n    this.toggleInterrupts(false);\r\n\r\n    this.safeClearInterval('idleHandle');\r\n    this.safeClearInterval('timeoutHandle');\r\n\r\n    this.setIdling(false);\r\n    this.running = false;\r\n\r\n    this.expiry.last(null);\r\n  }\r\n\r\n  /*\r\n   * Forces a timeout event and state.\r\n   */\r\n  timeout(): void {\r\n    this.stopKeepalive();\r\n\r\n    this.toggleInterrupts(false);\r\n\r\n    this.safeClearInterval('idleHandle');\r\n    this.safeClearInterval('timeoutHandle');\r\n\r\n    this.setIdling(true);\r\n    this.running = false;\r\n    this.countdown = 0;\r\n\r\n    this.onTimeout.emit(null);\r\n  }\r\n\r\n  /*\r\n   * Signals that user activity has occurred.\r\n   * @param force - Forces watch to be called, unless they are timed out.\r\n   * @param eventArgs - Optional source event arguments.\r\n   */\r\n  interrupt(force?: boolean, eventArgs?: any): void {\r\n    if (!this.running) {\r\n      return;\r\n    }\r\n\r\n    if (this.timeoutVal && this.expiry.isExpired()) {\r\n      this.timeout();\r\n      return;\r\n    }\r\n    this.onInterrupt.emit(eventArgs);\r\n\r\n    if (\r\n      force === true ||\r\n      this.autoResume === AutoResume.idle ||\r\n      (this.autoResume === AutoResume.notIdle && !this.expiry.idling())\r\n    ) {\r\n      this.watch(force);\r\n    }\r\n  }\r\n\r\n  private setIdling(value: boolean): void {\r\n    this.idling = value;\r\n    this.expiry.idling(value);\r\n  }\r\n\r\n  private toggleState(): void {\r\n    this.setIdling(!this.idling);\r\n\r\n    if (this.idling) {\r\n      this.onIdleStart.emit(null);\r\n      this.stopKeepalive();\r\n\r\n      if (this.timeoutVal > 0) {\r\n        this.countdown = this.timeoutVal;\r\n        this.doCountdown();\r\n        this.setTimoutIntervalOutsideZone(() => {\r\n          this.doCountdownInZone();\r\n        }, 1000);\r\n      }\r\n    } else {\r\n      this.toggleInterrupts(true);\r\n      this.onIdleEnd.emit(null);\r\n      this.startKeepalive();\r\n    }\r\n\r\n    this.safeClearInterval('idleHandle');\r\n  }\r\n\r\n  private setTimoutIntervalOutsideZone(\r\n    intervalFn: () => void,\r\n    frequency: number\r\n  ) {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.timeoutHandle = setInterval(() => {\r\n        intervalFn();\r\n      }, frequency);\r\n    });\r\n  }\r\n\r\n  private toggleInterrupts(resume: boolean): void {\r\n    for (const interrupt of this.interrupts) {\r\n      if (resume) {\r\n        interrupt.resume();\r\n      } else {\r\n        interrupt.pause();\r\n      }\r\n    }\r\n  }\r\n\r\n  private getExpiryDiff(timeout: number): number {\r\n    const now: Date = this.expiry.now();\r\n    const last: Date = this.expiry.last() || now;\r\n    return last.getTime() - now.getTime() - timeout * 1000;\r\n  }\r\n\r\n  private doCountdownInZone(): void {\r\n    this.zone.run(() => {\r\n      this.doCountdown();\r\n    });\r\n  }\r\n\r\n  private doCountdown(): void {\r\n    const diff = this.getExpiryDiff(this.timeoutVal);\r\n    if (diff > 0) {\r\n      this.safeClearInterval('timeoutHandle');\r\n      this.interrupt(true);\r\n      return;\r\n    }\r\n\r\n    if (!this.idling) {\r\n      return;\r\n    }\r\n\r\n    if (this.countdown <= 0) {\r\n      this.timeout();\r\n      return;\r\n    }\r\n\r\n    this.onTimeoutWarning.emit(this.countdown);\r\n\r\n    const countdownMs = ((this.timeoutVal - 1) * 1000) + diff;\r\n    this.countdown = Math.round(countdownMs / 1000);\r\n  }\r\n\r\n  private safeClearInterval(handleName: string): void {\r\n    const handle = this[handleName];\r\n    if (handle !== null && typeof handle !== 'undefined') {\r\n      clearInterval(this[handleName]);\r\n      this[handleName] = null;\r\n    }\r\n  }\r\n\r\n  private startKeepalive(): void {\r\n    if (!this.keepaliveSvc || !this.keepaliveEnabled) {\r\n      return;\r\n    }\r\n\r\n    if (this.running) {\r\n      this.keepaliveSvc.ping();\r\n    }\r\n\r\n    this.keepaliveSvc.start();\r\n  }\r\n\r\n  private stopKeepalive(): void {\r\n    if (!this.keepaliveSvc || !this.keepaliveEnabled) {\r\n      return;\r\n    }\r\n\r\n    this.keepaliveSvc.stop();\r\n  }\r\n\r\n  /*\r\n   * Called by Angular when destroying the instance.\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.stop();\r\n    this.clearInterrupts();\r\n  }\r\n}\r\n","import { InterruptSource } from './interruptsource';\r\n\r\n/*\r\n * A class for expressing arguments to interrupt events.\r\n */\r\nexport class InterruptArgs {\r\n  constructor(\r\n    public source: InterruptSource,\r\n    public innerArgs: any,\r\n    public force = false\r\n  ) {}\r\n}\r\n","import { EventEmitter } from '@angular/core';\r\n\r\nimport { InterruptArgs } from './interruptargs';\r\n\r\ndeclare const Zone: any;\r\n\r\n/*\r\n * A base for classes that act as a source for interrupts.\r\n */\r\nexport abstract class InterruptSource {\r\n  isAttached = false;\r\n\r\n  public onInterrupt: EventEmitter<InterruptArgs> = new EventEmitter<\r\n    InterruptArgs\r\n  >();\r\n\r\n  constructor(\r\n    protected attachFn?: (source: InterruptSource) => void,\r\n    protected detachFn?: (source: InterruptSource) => void\r\n  ) {}\r\n\r\n  /*\r\n   * Attaches to the specified events on the specified source.\r\n   */\r\n  attach(): void {\r\n    // If the current zone is the 'angular' zone (a.k.a. NgZone) then re-enter this method in its parent zone\r\n    // The parent zone is usually the '<root>' zone but it can also be 'long-stack-trace-zone' in debug mode\r\n    // In tests, the current zone is typically a 'ProxyZone' created by async/fakeAsync (from @angular/core/testing)\r\n    if (Zone.current.get('isAngularZone') === true) {\r\n      Zone.current.parent.run(() => this.attach());\r\n      return;\r\n    }\r\n\r\n    if (!this.isAttached && this.attachFn) {\r\n      this.attachFn(this);\r\n    }\r\n\r\n    this.isAttached = true;\r\n  }\r\n\r\n  /*\r\n   * Detaches from the specified events on the specified source.\r\n   */\r\n  detach(): void {\r\n    if (this.isAttached && this.detachFn) {\r\n      this.detachFn(this);\r\n    }\r\n\r\n    this.isAttached = false;\r\n  }\r\n}\r\n","import { Observable, Subscription, fromEvent, merge } from 'rxjs';\r\nimport { filter, throttleTime } from 'rxjs/operators';\r\n\r\nimport { InterruptArgs } from './interruptargs';\r\nimport { InterruptSource } from './interruptsource';\r\n\r\n/**\r\n * Options for EventTargetInterruptSource\r\n */\r\nexport interface EventTargetInterruptOptions {\r\n  /**\r\n   * The number of milliseconds to throttle the events coming from the target.\r\n   */\r\n  throttleDelay?: number;\r\n\r\n  /**\r\n   * Whether or not to use passive event listeners.\r\n   * Note: you need to detect if the browser supports passive listeners, and only set this to true if it does.\r\n   */\r\n  passive?: boolean;\r\n}\r\n\r\nconst defaultThrottleDelay = 500;\r\n\r\n/*\r\n * An interrupt source on an EventTarget object, such as a Window or HTMLElement.\r\n */\r\nexport class EventTargetInterruptSource extends InterruptSource {\r\n  private eventSrc: Observable<any>;\r\n  private eventSubscription: Subscription = new Subscription();\r\n  protected throttleDelay: number;\r\n  protected passive: boolean;\r\n\r\n  constructor(\r\n    protected target: any,\r\n    protected events: string,\r\n    options?: number | EventTargetInterruptOptions\r\n  ) {\r\n    super(null, null);\r\n\r\n    if (typeof options === 'number') {\r\n      options = { throttleDelay: options, passive: false };\r\n    }\r\n\r\n    options = options || {\r\n      throttleDelay: defaultThrottleDelay,\r\n      passive: false\r\n    };\r\n\r\n    if (options.throttleDelay === undefined || options.throttleDelay === null) {\r\n      options.throttleDelay = defaultThrottleDelay;\r\n    }\r\n\r\n    this.throttleDelay = options.throttleDelay;\r\n    this.passive = !!options.passive;\r\n\r\n    const opts = this.passive ? { passive: true } : null;\r\n    const fromEvents = events\r\n      .split(' ')\r\n      .map(eventName => fromEvent<any>(target, eventName, opts));\r\n    this.eventSrc = merge(...fromEvents);\r\n    this.eventSrc = this.eventSrc.pipe(\r\n      filter(innerArgs => !this.filterEvent(innerArgs))\r\n    );\r\n    if (this.throttleDelay > 0) {\r\n      this.eventSrc = this.eventSrc.pipe(throttleTime(this.throttleDelay));\r\n    }\r\n\r\n    const handler = (innerArgs: any) =>\r\n      this.onInterrupt.emit(new InterruptArgs(this, innerArgs));\r\n\r\n    this.attachFn = () =>\r\n      (this.eventSubscription = this.eventSrc.subscribe(handler));\r\n\r\n    this.detachFn = () => this.eventSubscription.unsubscribe();\r\n  }\r\n\r\n  /*\r\n   * Checks to see if the event should be filtered. Always returns false unless overriden.\r\n   * @param event - The original event object.\r\n   * @return True if the event should be filtered (don't cause an interrupt); otherwise, false.\r\n   */\r\n  protected filterEvent(event: any): boolean {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Returns the current options being used.\r\n   * @return The current option values.\r\n   */\r\n  get options(): EventTargetInterruptOptions {\r\n    return { throttleDelay: this.throttleDelay, passive: this.passive };\r\n  }\r\n}\r\n","import {\r\n  EventTargetInterruptOptions,\r\n  EventTargetInterruptSource\r\n} from './eventtargetinterruptsource';\r\n\r\n/*\r\n * An interrupt source that uses events on the document element (html tag).\r\n */\r\nexport class DocumentInterruptSource extends EventTargetInterruptSource {\r\n  constructor(events: string, options?: number | EventTargetInterruptOptions) {\r\n    super(document.documentElement, events, options);\r\n  }\r\n\r\n  /*\r\n   * Checks to see if the event should be filtered.\r\n   * @param event - The original event object.\r\n   * @return True if the event should be filtered (don't cause an interrupt); otherwise, false.\r\n   */\r\n  filterEvent(event: any): boolean {\r\n    // some browser bad input hacks\r\n    if (\r\n      event.type === 'mousemove' &&\r\n      // fix for Chrome destop notifications\r\n      ((event.originalEvent &&\r\n        event.originalEvent.movementX === 0 &&\r\n        event.originalEvent.movementY === 0) ||\r\n        // fix for webkit fake mousemove\r\n        ((event.movementX !== void 0 && !event.movementX) || !event.movementY))\r\n    ) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n","import {\r\n  EventTargetInterruptOptions,\r\n  EventTargetInterruptSource\r\n} from './eventtargetinterruptsource';\r\n\r\n/*\r\n * An interrupt source on the Window object.\r\n */\r\nexport class WindowInterruptSource extends EventTargetInterruptSource {\r\n  constructor(events: string, options?: number | EventTargetInterruptOptions) {\r\n    super(window, events, options);\r\n  }\r\n}\r\n","import { WindowInterruptSource } from './windowinterruptsource';\r\n\r\n/*\r\n * An interrupt source on the storage event of Window.\r\n */\r\nexport class StorageInterruptSource extends WindowInterruptSource {\r\n  constructor(throttleDelay = 500) {\r\n    super('storage', throttleDelay);\r\n  }\r\n\r\n  /*\r\n   * Checks to see if the event should be filtered.\r\n   * @param event - The original event object.\r\n   * @return True if the event should be filtered (don't cause an interrupt); otherwise, false.\r\n   */\r\n  filterEvent(event: StorageEvent): boolean {\r\n    if (\r\n      event.key &&\r\n      event.key.indexOf('ng2Idle.') >= 0 &&\r\n      event.key.indexOf('.expiry') >= 0\r\n    ) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","import { IdleExpiry } from './idleexpiry';\r\n\r\n/*\r\n * Represents a simple in-memory store of expiry values.\r\n * @extends IdleExpiry\r\n */\r\nexport class SimpleExpiry extends IdleExpiry {\r\n  private lastValue: Date = null;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  /*\r\n   * Gets or sets the last expiry date.\r\n   * @param value - The expiry value to set; omit to only return the value.\r\n   * @return The current expiry value.\r\n   */\r\n  last(value?: Date): Date {\r\n    if (value !== void 0) {\r\n      this.lastValue = value;\r\n    }\r\n\r\n    return this.lastValue;\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\n\r\nimport { Idle } from './idle';\r\nimport { IdleExpiry } from './idleexpiry';\r\nimport { LocalStorageExpiry } from './localstorageexpiry';\r\nimport { LocalStorage } from './localstorage';\r\n\r\n@NgModule({\r\n  providers: [LocalStorage]\r\n})\r\nexport class NgIdleModule {\r\n  static forRoot(): ModuleWithProviders<NgIdleModule> {\r\n    return {\r\n      ngModule: NgIdleModule,\r\n      providers: [\r\n        LocalStorageExpiry,\r\n        { provide: IdleExpiry, useExisting: LocalStorageExpiry },\r\n        Idle\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { DocumentInterruptSource } from './documentinterruptsource';\r\nimport { EventTargetInterruptOptions } from './eventtargetinterruptsource';\r\nimport { StorageInterruptSource } from './storageinterruptsource';\r\n\r\nexport function createDefaultInterruptSources(\r\n  options?: EventTargetInterruptOptions\r\n) {\r\n  return [\r\n    new DocumentInterruptSource(\r\n      'mousemove keydown DOMMouseScroll mousewheel mousedown touchstart touchmove scroll',\r\n      options\r\n    ),\r\n    new StorageInterruptSource()\r\n  ];\r\n}\r\n\r\nexport const DEFAULT_INTERRUPTSOURCES: any[] = createDefaultInterruptSources();\r\n","/*\r\n * Public API Surface of core\r\n */\r\n\r\nexport * from './lib/idle';\r\nexport * from './lib/interruptargs';\r\nexport * from './lib/interruptsource';\r\nexport * from './lib/eventtargetinterruptsource';\r\nexport * from './lib/documentinterruptsource';\r\nexport * from './lib/windowinterruptsource';\r\nexport * from './lib/storageinterruptsource';\r\nexport * from './lib/keepalivesvc';\r\nexport * from './lib/idleexpiry';\r\nexport * from './lib/simpleexpiry';\r\nexport * from './lib/localstorage';\r\nexport * from './lib/localstorageexpiry';\r\nexport * from './lib/module';\r\nexport * from './lib/defaultinterruptsources';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}